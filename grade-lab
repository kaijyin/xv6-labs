#!/usr/bin/env python

import sys, os, re, time, socket, select, subprocess, errno, shutil, random, string
from gradelib import *

r = Runner(save("xv6.out"))

# @test(5, "sleep, no arguments")
# def test_sleep_no_args():
#     r.run_qemu(shell_script([
#         'sleep'
#     ]))
#     r.match(no=["exec .* failed", "$ sleep\n$"])

# @test(5, "sleep, returns")
# def test_sleep_no_args():
#     r.run_qemu(shell_script([
#         'sleep',
#         'echo OK'
#     ]))
#     r.match('^OK$', no=["exec .* failed", "$ sleep\n$"])

# @test(10, "sleep, makes syscall")
# def test_sleep():
#     r.run_qemu(shell_script([
#         'sleep 10',
#         'echo FAIL'
#     ]), stop_breakpoint('sys_sleep'))
#     r.match('\\$ sleep 10', no=['FAIL'])

# @test(20, "pingpong")
# def test_pingpong():
#     r.run_qemu(shell_script([
#         'pingpong', 'echo OK'
#     ]))
#     r.match('^\\d+: received ping$', '^\\d+: received pong$', '^OK$')

# @test(20, "primes")
# def test_primes():
#     r.run_qemu(shell_script([
#         'primes', 'echo OK'
#     ]))
#     args = ['prime %d' % i for i in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]]
#     args.append('^OK$')
#     r.match(*args)

# @test(10, "find, in current directory")
# def test_find_curdir():
#     fn = random_str()
#     r.run_qemu(shell_script([
#         'echo > %s' % fn,
#         'find . %s' % fn
#     ]))
#     r.match('./%s' % fn)

# @test(10, "find, recursive")
# def test_find_recursive():
#     needle = random_str()
#     dirs = [random_str() for _ in range(3)]
#     r.run_qemu(shell_script([
#         'mkdir %s' % dirs[0],
#         'echo > %s/%s' % (dirs[0], needle),
#         'mkdir %s/%s' % (dirs[0], dirs[1]),
#         'echo > %s/%s/%s' % (dirs[0], dirs[1], needle),
#         'mkdir %s' % dirs[2],
#         'echo > %s/%s' % (dirs[2], needle),
#         'find . %s' % needle
#     ]))
#     r.match('./%s/%s' % (dirs[0], needle),
#             './%s/%s/%s' % (dirs[0], dirs[1], needle),
#             './%s/%s' % (dirs[2], needle))

# @test(19, "xargs")
# def test_xargs():
#     r.run_qemu(shell_script([
#         'sh < xargstest.sh',
#         'echo DONE',
#     ], 'DONE'))
#     matches = re.findall("hello", r.qemu.output)
#     assert_equal(len(matches), 3, "Number of appearances of 'hello'")


# # #--------------------------------------------------syscall-------------------------------------------
# @test(5, "trace 32 grep")
# def test_trace_32_grep():
#     r.run_qemu(shell_script([
#         'trace 32 grep hello README'
#     ]))
#     r.match('^\\d+: syscall read -> 1023')
#     r.match('^\\d+: syscall read -> 966')
#     r.match('^\\d+: syscall read -> 0')

# @test(5, "trace all grep")
# def test_trace_all_grep():
#     r.run_qemu(shell_script([
#         'trace 2147483647 grep hello README'
#     ]))
#     r.match('^\\d+: syscall trace -> 0')
#     r.match('^\\d+: syscall exec -> 3')
#     r.match('^\\d+: syscall open -> 3')
#     r.match('^\\d+: syscall read -> 1023')
#     r.match('^\\d+: syscall read -> 966')
#     r.match('^\\d+: syscall read -> 0')
#     r.match('^\\d+: syscall close -> 0')

# @test(5, "trace nothing")
# def test_trace_nothing():
#     r.run_qemu(shell_script([
#         'grep hello README'
#     ]))
#     r.match(no=[".* syscall .*"])

# @test(5, "trace children")
# def test_trace_children():
#     r.run_qemu(shell_script([
#         'trace 2 usertests forkforkfork'
#     ]))
#     r.match('3: syscall fork -> 4')
#     r.match('^5: syscall fork -> \\d+')
#     r.match('^6: syscall fork -> \\d+')
#     r.match('^\\d+: syscall fork -> -1')
#     r.match('^ALL TESTS PASSED')

# @test(14, "sysinfotest")
# def test_sysinfotest():
#     r.run_qemu(shell_script([
#         'sysinfotest'
#     ]))
#     r.match('^sysinfotest: OK', no=[".* FAIL .*"])


# #-----------------------------------------------pgtble--------------------------------------------
# PTE_PRINT = """page table 0x0000000087f6e000
#  ..0: pte 0x0000000021fda801 pa 0x0000000087f6a000
#  .. ..0: pte 0x0000000021fda401 pa 0x0000000087f69000
#  .. .. ..0: pte 0x0000000021fdac1f pa 0x0000000087f6b000
#  .. .. ..1: pte 0x0000000021fda00f pa 0x0000000087f68000
#  .. .. ..2: pte 0x0000000021fd9c1f pa 0x0000000087f67000
#  ..255: pte 0x0000000021fdb401 pa 0x0000000087f6d000
#  .. ..511: pte 0x0000000021fdb001 pa 0x0000000087f6c000
#  .. .. ..510: pte 0x0000000021fdd807 pa 0x0000000087f76000
#  .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000"""

# VAL_RE = "(0x00000000[0-9a-f]+)"
# INDENT_RE = r"\s*\.\.\s*"
# INDENT_ESC = "\\\s*\.\.\\\s*"

# @test(10, "pte printout")
# def test_pteprint():
#     first = True
#     r.run_qemu(shell_script([
#         'echo hi'
#     ]))
#     r.match('^hi')
#     p = re.compile(VAL_RE)
#     d = re.compile(INDENT_RE)
#     for l in PTE_PRINT.splitlines():
#         l = d.sub(INDENT_ESC, l)
#         l = p.sub(VAL_RE, l)
#         r.match(r'^{}$'.format(l))
#         if first:
#             first = False
#         else:
#             matches = re.findall(r'^{}$'.format(l), r.qemu.output, re.MULTILINE)
#             assert_equal(len(matches[0]), 2)
#             pa = (int(matches[0][0], 16) >> 10) << 12
#             assert_equal(int(matches[0][1], 16), pa)
    
# @test(5, "count copyin")
# def test_count():
#     r.run_qemu(shell_script([
#         'stats', 'stats'
#     ]), timeout=150)
#     matches = re.findall(r'^copyin: (\d+)', r.qemu.output, re.MULTILINE)
#     assert_equal(len(matches), 2)
#     assert_equal(int(matches[1]), int(matches[0]) + 28)
#     matches = re.findall(r'^copyinstr: (\d+)', r.qemu.output, re.MULTILINE)
#     assert_equal(len(matches), 2)
#     assert_equal(int(matches[1]), int(matches[0]) + 3)



# #-------------------------------------------traps--------------------------------------------
# BACKTRACE_RE = r"^(0x000000008[0-9a-f]+)"

# def addr2line():
#     for f in ['riscv64-unknown-elf-addr2line', 'riscv64-linux-gnu-addr2line', 'addr2line', ]:
#         try:
#             devnull = open(os.devnull)
#             subprocess.Popen([f], stdout=devnull, stderr=devnull).communicate()
#             return f
#         except OSError:
#             continue
#     raise AssertionError('Cannot find the addr2line program')

# @test(10, "backtrace test")
# def test_backtracetest():
#     r.run_qemu(shell_script([
#         'bttest'
#     ]))
#     a2l = addr2line()
#     matches = re.findall(BACKTRACE_RE, r.qemu.output, re.MULTILINE)
#     assert_equal(len(matches), 3)
#     files = ['sysproc.c', 'syscall.c', 'trap.c']
#     for f, m in zip(files, matches):
#         result = subprocess.run([a2l, '-e', 'kernel/kernel', m], stdout=subprocess.PIPE)
#         if not f in result.stdout.decode("utf-8"):
#             raise AssertionError('Trace is incorrect; no %s' % f)

# @test(0, "running alarmtest")
# def test_alarmtest():
#     r.run_qemu(shell_script([
#         'alarmtest'
#     ]))

# @test(20, "alarmtest: test0", parent=test_alarmtest)
# def test_alarmtest_test0():
#     r.match('^test0 passed$')

# @test(20, "alarmtest: test1", parent=test_alarmtest)
# def test_alarmtest_test1():
#     r.match('^\\.?test1 passed$')

# @test(10, "alarmtest: test2", parent=test_alarmtest)
# def test_alarmtest_test2():
#     r.match('^\\.?test2 passed$')

#----------------------------------------lazy---------------------------------------
@test(0, "running lazytests")
def test_lazytests():
    r.run_qemu(shell_script([
        'lazytests'
    ]))

@test(20, "lazy: map", parent=test_lazytests)
def test_filetest():
    r.match("^test lazy unmap: OK$")

@test(20, "lazy: unmap", parent=test_lazytests)
def test_memtest():
    r.match("test lazy alloc: OK$")


run_tests()
