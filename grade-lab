#!/usr/bin/env python

import re
from gradelib import *

r = Runner(save("xv6.out"))

# @test(5, "sleep, no arguments")
# def test_sleep_no_args():
#     r.run_qemu(shell_script([
#         'sleep'
#     ]))
#     r.match(no=["exec .* failed", "$ sleep\n$"])

# @test(5, "sleep, returns")
# def test_sleep_no_args():
#     r.run_qemu(shell_script([
#         'sleep',
#         'echo OK'
#     ]))
#     r.match('^OK$', no=["exec .* failed", "$ sleep\n$"])

# @test(10, "sleep, makes syscall")
# def test_sleep():
#     r.run_qemu(shell_script([
#         'sleep 10',
#         'echo FAIL'
#     ]), stop_breakpoint('sys_sleep'))
#     r.match('\\$ sleep 10', no=['FAIL'])

# @test(20, "pingpong")
# def test_pingpong():
#     r.run_qemu(shell_script([
#         'pingpong', 'echo OK'
#     ]))
#     r.match('^\\d+: received ping$', '^\\d+: received pong$', '^OK$')

# @test(20, "primes")
# def test_primes():
#     r.run_qemu(shell_script([
#         'primes', 'echo OK'
#     ]))
#     args = ['prime %d' % i for i in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]]
#     args.append('^OK$')
#     r.match(*args)

# @test(10, "find, in current directory")
# def test_find_curdir():
#     fn = random_str()
#     r.run_qemu(shell_script([
#         'echo > %s' % fn,
#         'find . %s' % fn
#     ]))
#     r.match('./%s' % fn)

# @test(10, "find, recursive")
# def test_find_recursive():
#     needle = random_str()
#     dirs = [random_str() for _ in range(3)]
#     r.run_qemu(shell_script([
#         'mkdir %s' % dirs[0],
#         'echo > %s/%s' % (dirs[0], needle),
#         'mkdir %s/%s' % (dirs[0], dirs[1]),
#         'echo > %s/%s/%s' % (dirs[0], dirs[1], needle),
#         'mkdir %s' % dirs[2],
#         'echo > %s/%s' % (dirs[2], needle),
#         'find . %s' % needle
#     ]))
#     r.match('./%s/%s' % (dirs[0], needle),
#             './%s/%s/%s' % (dirs[0], dirs[1], needle),
#             './%s/%s' % (dirs[2], needle))

# @test(19, "xargs")
# def test_xargs():
#     r.run_qemu(shell_script([
#         'sh < xargstest.sh',
#         'echo DONE',
#     ], 'DONE'))
#     matches = re.findall("hello", r.qemu.output)
#     assert_equal(len(matches), 3, "Number of appearances of 'hello'")

# # @test(1, "time")
# # def test_time():
# #     check_time()
    
# # run_tests()

# #--------------------------------------------------syscall-------------------------------------------
# @test(5, "trace 32 grep")
# def test_trace_32_grep():
#     r.run_qemu(shell_script([
#         'trace 32 grep hello README'
#     ]))
#     r.match('^\\d+: syscall read -> 1023')
#     r.match('^\\d+: syscall read -> 966')
#     r.match('^\\d+: syscall read -> 0')

# @test(5, "trace all grep")
# def test_trace_all_grep():
#     r.run_qemu(shell_script([
#         'trace 2147483647 grep hello README'
#     ]))
#     r.match('^\\d+: syscall trace -> 0')
#     r.match('^\\d+: syscall exec -> 3')
#     r.match('^\\d+: syscall open -> 3')
#     r.match('^\\d+: syscall read -> 1023')
#     r.match('^\\d+: syscall read -> 966')
#     r.match('^\\d+: syscall read -> 0')
#     r.match('^\\d+: syscall close -> 0')

# @test(5, "trace nothing")
# def test_trace_nothing():
#     r.run_qemu(shell_script([
#         'grep hello README'
#     ]))
#     r.match(no=[".* syscall .*"])

# @test(5, "trace children")
# def test_trace_children():
#     r.run_qemu(shell_script([
#         'trace 2 usertests forkforkfork'
#     ]))
#     r.match('3: syscall fork -> 4')
#     r.match('^5: syscall fork -> \\d+')
#     r.match('^6: syscall fork -> \\d+')
#     r.match('^\\d+: syscall fork -> -1')
#     r.match('^ALL TESTS PASSED')

# @test(14, "sysinfotest")
# def test_sysinfotest():
#     r.run_qemu(shell_script([
#         'sysinfotest'
#     ]))
#     r.match('^sysinfotest: OK', no=[".* FAIL .*"])

# # @test(1, "time")
# # def test_time():
# #     check_time()

# # run_tests()

#-----------------------------------------------pgtble--------------------------------------------
PTE_PRINT = """page table 0x0000000087f6e000
 ..0: pte 0x0000000021fda801 pa 0x0000000087f6a000
 .. ..0: pte 0x0000000021fda401 pa 0x0000000087f69000
 .. .. ..0: pte 0x0000000021fdac1f pa 0x0000000087f6b000
 .. .. ..1: pte 0x0000000021fda00f pa 0x0000000087f68000
 .. .. ..2: pte 0x0000000021fd9c1f pa 0x0000000087f67000
 ..255: pte 0x0000000021fdb401 pa 0x0000000087f6d000
 .. ..511: pte 0x0000000021fdb001 pa 0x0000000087f6c000
 .. .. ..510: pte 0x0000000021fdd807 pa 0x0000000087f76000
 .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000"""

VAL_RE = "(0x00000000[0-9a-f]+)"
INDENT_RE = r"\s*\.\.\s*"
INDENT_ESC = "\\\s*\.\.\\\s*"

@test(10, "pte printout")
def test_pteprint():
    first = True
    r.run_qemu(shell_script([
        'echo hi'
    ]))
    r.match('^hi')
    p = re.compile(VAL_RE)
    d = re.compile(INDENT_RE)
    for l in PTE_PRINT.splitlines():
        l = d.sub(INDENT_ESC, l)
        l = p.sub(VAL_RE, l)
        r.match(r'^{}$'.format(l))
        if first:
            first = False
        else:
            matches = re.findall(r'^{}$'.format(l), r.qemu.output, re.MULTILINE)
            assert_equal(len(matches[0]), 2)
            pa = (int(matches[0][0], 16) >> 10) << 12
            assert_equal(int(matches[0][1], 16), pa)
    
@test(5, "answers-pgtbl.txt")
def test_answers():
    # just a simple sanity check, will be graded manually
    check_answers("answers-pgtbl.txt")

@test(5, "count copyin")
def test_count():
    r.run_qemu(shell_script([
        'stats', 'stats'
    ]), timeout=150)
    matches = re.findall(r'^copyin: (\d+)', r.qemu.output, re.MULTILINE)
    assert_equal(len(matches), 2)
    assert_equal(int(matches[1]), int(matches[0]) + 28)
    matches = re.findall(r'^copyinstr: (\d+)', r.qemu.output, re.MULTILINE)
    assert_equal(len(matches), 2)
    assert_equal(int(matches[1]), int(matches[0]) + 3)

@test(0, "usertests")
def test_usertests():
    r.run_qemu(shell_script([
        'usertests'
    ]), timeout=300)

def usertest_check(testcase, nextcase, output):
    if not re.search(r'\ntest {}: [\s\S]*OK\ntest {}'.format(testcase, nextcase), output):
        raise AssertionError('Failed ' + testcase)

@test(5, "usertests: copyin", parent=test_usertests)
def test_copyin():
    usertest_check("copyin", "copyout", r.qemu.output)

@test(5, "usertests: copyinstr1", parent=test_usertests)
def test_copyin():
    usertest_check("copyinstr1", "copyinstr2", r.qemu.output)
    
@test(5, "usertests: copyinstr2",  parent=test_usertests)
def test_copyinstr2():
    usertest_check("copyinstr2", "copyinstr3", r.qemu.output)

@test(5, "usertests: copyinstr3",  parent=test_usertests)
def test_copyinstr3():
    usertest_check("copyinstr3", "truncate1", r.qemu.output)

@test(5, "usertests: sbrkmuch",  parent=test_usertests)
def test_sbrkmuch():
    usertest_check("sbrkmuch", "kernmem", r.qemu.output)

@test(20, "usertests: all tests", parent=test_usertests)
def test_usertests():
    r.match('^ALL TESTS PASSED$')

@test(1, "time")
def test_time():
    check_time()

run_tests()
